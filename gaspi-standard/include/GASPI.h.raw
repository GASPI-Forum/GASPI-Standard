#ifndef GASPI_H
#define GASPI_H

#ifdef __cplusplus
extern "C"
{
#endif

/*
 * Elementary GASPI types and implementation specific enumerations.
 *
 * TYPES:
 *   The elementary GASPI types, (gaspi_rank_t, gaspi_timeout_t, etc.) 
 *   used in the GASPI specification shall be part of the actual 
 *   implementation. The elementary GASPI types shall be included as part of an external 
 *   implementation header file.
 * 
 * ENUMERATIONS:
 *   The error code enumeration, policy enumeration, enumerations for configuration files
 *   and possible states for the state vector are specific for an actual implementation. 
 *   The enumerations shall be included as part of an external implementation header file.
 */

  
/* 
 * ENUMERATION:
 *   gaspi_operation_t
 *
 * Collective communication operations. 
 * The GASPI specification defines the following enumeration:
 *
 *   GASPI_OP_MIN - determines the minimum of the elements of each column of the input vector.
 *   GASPI_OP_MAX - determines the maximum of the elements of each column of the input vector.
 *   GASPI_OP_SUM - sums up all elements of each column of the input vector.
 */

typedef enum { GASPI_OP_MIN
             , GASPI_OP_MAX
             , GASPI_OP_SUM
             } gaspi_operation_t;

/*
 * ENUMERATION:
 *   gaspi_datatype_t
 *
 * Predefined types for the allreduce operation 
 * The GASPI specification defines the following enumeration:
 *
 *   GASPI_TYPE_INT - integer
 *   GASPI_TYPE_UINT - unsigned integer
 *   GASPI_TYPE_LONG - long
 *   GASPI_TYPE_ULONG - unsigned long
 *   GASPI_TYPE_FLOAT - float
 *   GASPI_TYPE_DOUBLE - double
 */

typedef enum { GASPI_TYPE_INT
             , GASPI_TYPE_UINT
             , GASPI_TYPE_LONG
             , GASPI_TYPE_ULONG
             , GASPI_TYPE_FLOAT
             , GASPI_TYPE_DOUBLE
             } gaspi_datatype_t;

/*
 * TYPE:
 *   gaspi_config_t
 *
 * Predefined type which contains the GASPI config values.
 * These can be set, retrieved by gaspi_config_set and gaspi_config_get respectively.
 *
 *   group_max - the desired maximum number of permissible groups per process. 
 *     There is a hardware/implementation dependent maximum.
 *
 *   segment_max - the desired number of maximally permissible 
 *     segments per GASPI process. There is a hardware/implementation dependent maximum.
 * 
 *   queue_num - the desired number of one-sided communication queues to be created. 
 *     There is a hardware/implementation dependent maximum.
 *
 *   queue_size_max - the desired number of simultaneously allowed on-going requests on a 
 *     one-sided communication queue. There is a hardware/implementation dependent maximum.
 *
 *   transfer_size_max - the desired maximum size of a single data
 *     transfer in the one-sided communication channel.
 *     There is a hardware/implementation dependent maximum.
 *
 *   notification_num - the desired number of internal notification buffers for weak 
 *     synchronisation to be created. There is a hardware/implementation dependent maximum.
 *
 *   passive_queue_size_max - the desired number of simultaneously allowed on-going requests on the
 *     passive communication queue. There is a hardware/implementation dependent maximum.
 *
 *   passive_transfer_size_max - the desired maximum size of a
 *     single data transfer in the passive communication channel.
 *     There is a hardware/implementation dependent maximum.
 *
 *   allreduce_elem_max - the maximum number of elements in gaspi_allreduce.
 *     There is a hardware/implementation dependent maximum.
 *
 *   allreduce_buf_size - the size of the internal buffer of gaspi_allreduce_user.
 *     There is a hardware/implementation dependent maximum.
 *
 *   network - the network type to be used.
 *
 *   build_infrastructure - indicates whether the communication infrastructure should
 *     be built up at startup time. The default value is true.
 *
 *   user_defined - some user defined information that is application / implementation dependent.
 */

typedef struct {
  gaspi_number_t     group_max;
  gaspi_number_t     segment_max;
  gaspi_number_t     queue_num;
  gaspi_number_t     queue_size_max;
  gaspi_size_t       transfer_size_max;
  gaspi_number_t     notification_num;
  gaspi_number_t     passive_queue_size_max;
  gaspi_size_t       passive_transfer_size_max;
  gaspi_size_t       allreduce_buf_size;
  gaspi_number_t     allreduce_elem_max;
  gaspi_network_t    network;
  gaspi_number_t     build_infrastructure;
  void *             user_defined;
} gaspi_config_t;

  
/* HERE */


#ifdef __cplusplus
}
#endif
#endif
